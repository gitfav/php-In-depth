一、基础
1、写法：
	
2、定义
	（1）、对象也能当做数组来用。

	（2）、数组式访问接口：（重要）
	arrayaccess{
		abstract public boolean offsetExists(mixed $offset)
		abstract public mixed offsetGet(mixed $offset)
		abstract public boolean offsetSet(mixed $offset)
		abstract public boolean offsetUnset(mixed $offset)
	}
	· ArrayAccess::offsetExists — 检查一个偏移位置是否存在
	· ArrayAccess::offsetGet — 获取一个偏移位置的值
	· ArrayAccess::offsetSet — 设置一个偏移位置的值
	· ArrayAccess::offsetUnset — 复位一个偏移位置的值
3、数组key和value的限制条件
	· key可以是integer或者string。
	· value可以是任意类型

	key有如下强制转换
	· 包含合法整型值的字符串会强制转换成整型
	· 浮点型和布尔值也会被转成整型
	· 建名为null的会转换成""
	· 数组和对象不能被用为键名
	· 相同键名，之前会被覆盖
4、数组的访问
	获取数组元素的值有哪些方法
	（1）、方括号，数组单元可以通过array[key]语法来访问。
	（2）、花括号也可以，例如 $array[42] 和 $array{42} 效果相同。
	（3）、方括号可以包括“表达式”，例如：$arr[somefunc($bar)]。
	（4）、自 PHP 5.4 起可以用数组间接引用函数或方法调用的结果。 如：
		function getArray(){
			return array(1,2,3);
		}
		echo getArray()[1];
5、数组元素删除 - unset
	· unset()函数允许删除数组中的某个键
	· 数组unset()后，不会重建索引
6、PHP数组类型与其他类型的转换
	PHP中有8种变量类型，分三类
	· 标量类型：boolean、integer、float(double)、string
	· 复合类型：array 、 object
	· 特殊类型：resource（资源类型）、NULL
	PHP数组类型与其他类型的转换（上课试试）
	· int，float，string，boolean 和 resource 类型 (array)$scalarValue 等同 array($scalarValue)
	· object 转换为 array，结果为一个数组，其单元为该对象的属性，键名将为成员变量名
	· 将 NULL 转换为 array 会得到一个空的数组。
7、数组的遍历
	（1）、for ：语句循环遍历 
	（2）、foreach ：循环遍历 
	（3）、while： (list($key, $val) = each($fruit)) 
	（4）、array_walk、array_map ：回调遍历（查看手册）
	（5）、current和next ：内部指针遍历

	foreach和for性能对比
	    在遍历过程中要访问数组元素或者对元素进行处理，foreach更快
	foreach遍历中的顺序
	    看下面程序的执行结果。
		$a = array();
		$a[2] = 3;
		$a[1] = 2;
		$a[0] = 1;
		foreach ($a as $v) {
			echo $v;
		}
	foreach遍历中的引用
		$arr = array(1,2,3);
		foreach($arr as &$v){} //$v的值指向了$arr[2]
		foreach($arr as $v){
  			echo $v;
		}
		值：1,2,2
		循环过程：
			第一次 foreach( $arr as $k => &$v)
			循环1：$v = &$arr[0] = 1;
			循环2：$v = &$arr[1] = 2;
			循环3：$v = &$arr[2] = 3;
			第二次 foreach( $arr as $k => $v)
			循环1：$v = &$arr[2] = arr[0] = 1; 此时 $arr[2] = 1
			循环2：$v = &$arr[2] = arr[1] = 2; 此时 $arr[2] = 2
			循环3：$v = &$arr[2] = arr[2] = 2;
			此时 $arr = array(1, 2, 2);

二、数组底层结构
1、PHP数组的内部实现
	· 实现数组使用了两个数据结构，一个是HashTable,另一个是bucket。
	· HashTable结构体用于保存整个数组需要的基本信息。
	· Bucket结构体用于保存具体的数据内容。
2、什么是HashTable ？
	· 它通过把键值通过一个函数的计算，映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做哈希函数。
	· hash table，又叫哈希表，散列表，Hash表。
	· 这种数据结构通过key->value的映射关系，使得普通的查找和插入、删除操作都可以在O(1) 的时间内完成。
	· key->value的映射是通过Hash函数来实现的。

3、PHP数组Hashtable结构体
	typedef struct _hashtable {
	    uint nTableSize;        // hash Bucket的大小，最小为8，以2x增长。
	    uint nTableMask;        // nTableSize-1 ， 索引取值的优化，193491849 & 127
	    uint nNumOfElements;    // hash Bucket中当前存在的元素个数，count()函数会直接返回此值。
	    ulong nNextFreeElement; // 下一个数字索引的位置
	    Bucket *pInternalPointer;   // 当前遍历的指针foreach比for快的原因之一,reset, current遍历函数使用
	    Bucket *pListHead;          // 存储数组头元素指针
	    Bucket *pListTail;          // 存储数组尾元素指针
	    Bucket **arBuckets;         // 存储hash数组,实际的存储容器
	    unsigned char nApplyCount; // 标记当前hash Bucket被递归访问的次数（防止多次递归）
	} HashTable;

	Bucket是 hashtable具体元素。

	typedef struct bucket {
	    ulong h;            // 对char *key进行hash后的值，或者是用户指定的数字索引值
	    uint nKeyLength;    // hash关键字的长度，如果数组索引为数字，此值为0
	    void *pData;        // 指向value，一般是用户数据的副本，如果是指针数据，则指向pDataPtr
	    void *pDataPtr;     //如果是指针数据，此值会指向真正的value，同时上面pData会指向此值
	    struct bucket *pListNext;   // 整个hash表的下一元素
	    struct bucket *pListLast;   // 整个hash表该元素的上一个元素
	    struct bucket *pNext;       // 存放在同一个hash Bucket内的下一个元素
	    struct bucket *pLast;       // 同一个hash bucket的上一个元素 （防止哈希碰撞执行同一个地方带来的不便）
	    const char *arKey;          // 保存当前key所对应的字符串值
	} Bucket;
4、数组的扩容问题 (使用 memory_get_usage(true)查看内存使用)
	· HashTable的大小并不是固定不变的，当nNumOfElements > nTableSize时，会对HashTable进行扩容，以便于容纳更多的元素。（所以可能加了一个值，但数组容量扩的很多：以2x增长）
	· 扩容之后需要对原来hashTable的元素rehash。
5、排序的原理
	由于数组排序并不会改变数组中的元素，而只是改变了数组中元素的位置，因而，对底层而言，实际上只是对全局的双链表进行排序。
	· 申请n个额外的空间（n是数组元素个数）
	· 然后遍历双链表，将双链表的每个节点存储到临时空间
	· 调用排序函数zend_qsort（内部是快速排序算法）对数组进行排序
	· 排序之后，双链表中节点的位置发生了变化，因而需要调整指针的指向。
	· 遍历数组，分别设置每一个节点的pListLast和pListNext
	· 最后设置HashTable的pListTail
三、需要关注的知识点
	1、php位运算的应用
		· 判断int型变量a是奇数还是偶数：a&1 = 0 偶数  a&1 = 1 奇数
		· 乘法运算转化成位运算：a * (2^n) 等价于 a<< n
		· 除法运算转化成位运算：a / (2^n) 等价于 a>> n
		· 不用temp交换两个整数x ^= y; y ^= x; x ^= y;
		· 二进制位掩码，提供了一种用一个选项表示多项的可能。（参考：error_reporting设置错误级别的方式）
			error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);
			error_reporting(E_ALL ^ E_NOTICE);
	2、输入流 php://input

		先了解网站：http://php.net/manual/zh/wrappers.php.php#wrappers.php.input
	3、数组与数据结构

	    链表 双向链表 环链表

        数组和数据结构之“集合”

        集合是一组可变数量的数据项的组合。

        栈：
        array_pop($stack);//出栈
        array_push($stack,$item);//入栈

        array_push($queue,7) //入列
        array_shift($queue) //出列



课堂记录：

预定义数组

_GLOBALS --引用全局作用域中可用的全部变量
_SERVER
_POST
_GET
_COOKIE
_FILES
_ENV --环境变量

php数组转换成字符串，也即串行化、持久化
    方法一：函数Serialize()可以实现
    方法二：函数json_encode()可以实现
    方法三：函数var_export($items,true); （把数组存入文件）
    方法四：xml、自定义文件格式...

PHP数组“指针”相关函数
    current()
    end()
    next()
    prev()
    reset()
    each()

PHP数组元素查找
    键值是否存在 array_key_exiests()和isset()
    值是否存在 in_array()和array_search()
    依据键返回值： $items[$key]
    依据值返回值： array_keys()

PHP数组的过滤与移除
1、直接用unset移除元素（但不可靠）
2、建立新数组，加入合适的元素（推荐）

PHP排序函数：
    array_multisort();
    usort();