一、JavaScript-闭包
1、从现象开始
	什么叫闭包：
	《javascript高级程序设计》闭包是指有权访问另一个函数作用域的变量的函数
	一个外部函数执行完毕之后，由于其内部函数被外部引用，导致其作用域的变量继续存活，而不能在函数执行完毕后被销毁，包含这些变量的那个对象就成为闭包
2、JavaScript-闭包-4-闭包的应用
	var obj1() = {
		name : '四脚猫',
		_secret : '秘密',
		_lave : function(){console.log(name + '洗澡ing')},
		_toilet : function(){console.log(name + '上厕所ing')},
		show : function() {
			this.toilet()
			this.lave()
			console.log(this.name + ' hi')
		}
	}
	上面对象的_secret，_lave，_toilet属性和函数仍可以外部访问。
	使用闭包：
	function make(name){
		var secret = "秘密"
		var lave = function(){console.log(name + '洗澡ing')}
		var toilet = function(){console.log(name + '上厕所ing')}
		return {
			name : name,
			show : function() {
				toilet()
				lave()
				console.log(this.name + ' hi')
			}
		}
	}

	var obj2 = make('四脚猫升级版');//lave和toilet函数外部无法访问

    · 闭包得到 可以是一个对象，但对象里面必须要有函数。

二、JavaScript-原型和原型链

    · 原型（prototype）：
	function Animal(name) {
		this.name = name;
		this.run = function(){console.log(this.name+'run')};
		this.cry = function(){console.log(this.name+'cry')};
	}
	var a = new Animal('d');
	如果上面定义一个类。每个类会生成自己的对象。浪费资源。

	function Animal(){
		this.name = '动物'
	}

	Animal.prototype.run = function() {
		console.log(this.name + 'run');
	}
	上面的在创建对象，执行函数时。如果没有run函数，会去类原型中找。这样可以节约资源

	var aa = new Animal();
	console.log(aa._proto_ == Animal.prototype) 是 true

	· 原型链（和类的继承相识）：

	实例化对象 _proto_
	function Animal(){
		this.name = '动物'
	}
	Aniamal.prototype.run = function() {
		console.log(this.name + 'run');
	}

	function Bird(){
		this.name = '鸟'
	}
	Bird.prototype = new Animal();
	Bird.prototype.fly = function() {
		console.log(this.name + '飞走了');
	}

	function Crow(name) {
		this.name = name || '乌鸦'
	}
	Crow.prototype = new Bird();//生成一个原型链
	Crow.prototype.drink = function() {
		console.log(this.name + '喝水');
	}
	var crow = new Crow('可爱的乌鸦');
	crow.drink();
	crow.run();
	crow.fly();
三、JavaScript-作用域和作用域链

四、JavaScript-执行流与错误影响范围
	js Callback  ->   mouse click callback  ->     timer      ->  interval  -> interval -> ... -> interval
	正在处理的函数快	鼠标点击事件	         setTimeout       setInterval
	出现语法错误时，只会影响自己运行的一块后面的代码

	jq的 $(function(){}) 中，如果有错，后面会影响，除非出差代码自己是独立一个函数块（执行流）

    执行流：
        语法错误 ：影响整块执行流。
        运行时错误 ：影响后面的代码执行。
	    script标签中，setTimeout 会产生一个执行流 setTimeout等待代码执行结束，执行setTimeout。

五、JavaScript-基础重点
1、对象作为函数的参数传递
	function(){
		var point = {left:0, top:2}
		function change(point) {
			point.left = 2
		}
		function change2(point) {
			point = {left:3, top:4}
		}
		change(point); //这里实参和形参都指向 {left:0, top:2}。所以{left:0, top:2}中 left 会改变
		console.log(point)
		change2(point); //刚赋值时，形参和实参都指向{left:0, top:2} 。但函数里的 形参又赋值。形参重新指向{left:3, top:4}。与实参指向不同了
		console.log(point)
	}
2、了解this
	var name = 'www.sijiaomao.com'
	var person = {
		name :'四脚猫',
		getName:function() {
			setTimeout(function(){
				console.log('a='+this.name)
			},0)
		}

		return this.name
	}

	var getName = person.getName

	console.log('b='+person.getName()); //这里的 函数中的 this 指向对象
	console.log('c='+getName()); //因为这里只调用了函数，这里 this 指向了最外层windows。所以这里值 c=www.sijiaomao.com
3、变量声明提升
	（1）、
	getName();//此次因为没有执行 变量 声明。所以执行下面的函数声明
	var getName = function(){
		console.log('四脚猫');
	}

	function getName(){
		console.log('sijioamao.com');
	}
	getName();//这里因为执行了 变量 声明，所以变量声明覆盖了函数声明。这里执行了变量声明


	（2）、变量声明
		$(function(){
			name = '四脚猫'; //这里没有加 var ，name变成了全局变量
			for(i = 0;i < 10; i++) {}

			var x = y = z =1;  //这里 var只影响了 x ,y和z成了全局变量。此次容易出错
			var a=1 ,b =1 ,c=1;  //此处写法时局部作用域
		})();
4、数组方法的注意事项
	（1）、
		var a = [1,2,3]
		var b = a.reverse() //a发生了变化
		console.log(a,b)

		var c = [4,5,6]
		var d = c.concat('x','y','z'); //c没有发生变化
		console.log(c,d)

		var a = [1,23,3,4,56]
		console.info(a.sort()) //根据assics 来排序的

5、typeof 使用
	var a = [];
	var b;
	var c = null;
	function d() {};

	console.log(typeof a);  //得到的类型  object
	console.log(typeof b);	//得到的类型  undefined
	console.log(typeof c);	//得到的类型  object
	console.log(typeof d);	//得到的类型  function

6、函数返回对象
	function A(name){
		this.name = '四脚猫高级';
		return {name : name}
	}
	var a = A('sss');
	var b = new A('sss');  //注意：这里由于类返回了一个对象 ，new就不起作用（设计缺陷）。所以b 是 {name : name} 。b.name 的值是 'sss'
	console.log(a.name, b.name);    输出：sss,sss

    //对象作为参数
    function change(b){
        b.name = '123';
    }
    function change2(b){
        b = {name : 'r23',age:23};
    }
    point = {name:'asd',age:39};
    change(point); //传入实参到函数，实参和形参都指向同一个对象。
    console.log(point);
    change2(point); //传入实参到函数，实参和形参都指向同一个对象。但形参重新赋值，所以实参和形参指向了不同的对象

7、switch
    switch(true) {
        case 1:
            ;
        case 2:
            ;
        case 'true':
            ;
        default:
            ;
    }
    因为switch需要判断是 === ，所以会执行 default
六、数据类型转换
	若 x 与 y 的类型相同  X == Y, 比较运算按如下方式进行
	· 若Type(x)为Undefined或Null， 返回true。
	· 若Type(x)为Number 	若x或y为NaN， 返回false。	若x与y为相等数值， 返回true。其他，返回false。
	· 若Type(x)为String	当x和y为完全相同的字符序列时返回true；否则返回false。
	· 若Type(x)为Boolean 当x和y为同为true或者同为false时返回true； 否则返回false。
	· 当x和y为引用同一对象时返回true；否则返回false。
    NaN == NaN 结果为 false

	如果 x 和 y 的类型不同  X == Y, 比较运算按如下方式进行
	· 若x(或y)为null且y(或x)为undefined， 返回true
	· 若Type(x) 为 Number 且 Type(y)为String， 返回比较 x == ToNumber(y)的结果
	· 若Type(x) 为 String 且 Type(y)为Number，返回比较ToNumber(x) == y的结果
	· 若Type(x)为Boolean， 返回比较ToNumber(x) == y的结果
	· 若Type(y)为Boolean， 返回比较x == ToNumber(y)的结果
	· 若Type(x)为String或Number，且Type(y)为Object，返回比较x == ToPrimitive(y)的结果 （ToPrimitive指返回原始值）
	· 若Type(x)为Object且Type(y)为String或Number，返回比较ToPrimitive(x) == y的结果
	· 返回false

    ToPrimitive();
	var o = {
		valueOf: function(){return 5}, //
		toString:function(){return '3'} //默认为 '[object]'
	}

	例子:
	false == {};的值是ture还是false
	第一步： false 转数字 为 0
	二   ： {} 进行 ToPrimitive() 得到原始值。原始值未 '[object]' 的字符串
	三   ： 因为左边为数字  。 '[object]' 要转数字，字符串没有数字，变成NaN
    转换时，类型不同 主要是有数字都转成数字

    比较时 ：先看是否类型相同-》看转换成数字比较

七、call&apply
	var obj1 = {
		name : 'sss',
		value: 0,
		add : function(a,b,c) {
			this.value = a+b+c;
		},
		get : function(){
			console.log(this.name, this.value)
		}
	}

	var obj2 = {name:'qqq', value:0}
	obj1.add.call(obj2,1,2,3); //函数后 调用了 call ，则obj2 , add的this就指向了 obj2 。就像obj2借用了obj1的方法
	call和apply作用一样 apply 调用传参不同  obj1.add.apply(obj2,[1,2,3]);

八、事件和事件委托
	$('a').click(fn)                //事件对每个a标签绑定
	$('body').on('click','a',fn)    //这里对body进行绑定。如果点击a，因为有冒泡功能，所以向上会找到body中的事件。所以如果想大量绑定同一个标签，可以使用此方法。