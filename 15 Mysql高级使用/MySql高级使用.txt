二、mysql表存储引擎
    1、MYISAM存储引擎的锁机制
        读锁可以被读操作共享,不影响,但读锁会影响写操作.
        写锁会影响所有的读写操作.
    2、MyISAM存储引擎有一个系统变量concurrent_insert，专门用以控制其 并发插入 的行为，其值分别可以为0、1或2。
        a、当concurrent_insert设置为0时，不允许并发插入。
        b、当concurrent_insert设置为1时，如果MyISAM表中没有空洞（即表的中间没有被删除的行），MyISAM允许在一个进程读表的同时，另一个进程从表尾插入记录。这也是MySQL的默认设置。
        c、当concurrent_insert设置为2时，无论MyISAM表中有没有空洞，都允许在表尾并发插入记录。
    3、MyISAM的锁调度
        由于MySQL认为写请求一般比读请求要重要，所以如果有读写请求同时进行的话，MYSQL将会优先执行写操作。

        我们可以通过一些设置来调节MyISAM的调度行为：

        a、通过指定启动参数low-priority-updates，使MyISAM引擎默认给予读请求以优先的权利。
        b、通过执行命令SET LOW_PRIORITY_UPDATES=1，使该连接发出的更新请求优先级降低。
    4、

    5、乐观锁  和  悲观锁
三、INNODB存储引擎的锁
    1、INNODB存储引擎的锁
        从sql语句上来说 update ,delete  会自动给涉及到的数据集加上排他锁 ,而普通的select则不加任何锁!

    2、INNODB存储引擎的事务

        事务的隔离级别有四种
        非提交读 read uncommitted       没提交， 查找相应数据 数据值变了（脏读）
        提交读     read committed
        可重复读 repeatable read (默认)
        序列化     serializable

        隔离级别	                    脏读（Dirty Read）	不可重复读（NonRepeatable Read）	幻读（Phantom Read）
        未提交读（Read uncommitted）	可能	                可能	                            可能
        已提交读（Read committed）	不可能	            可能	                            可能
        可重复读（Repeatable read）	不可能	            不可能	                        可能
        可串行化（Serializable ）	    不可能	            不可能	                        不可能

四、PHP的MySQL驱动与API
    php 的api 分三类
    mysql / mysqli /pdo_mysql

        mysql 扩展是在php4.1.3 或更早的版本设计的 , 如果php版本较低,用他是合适的
        mysqli 是mysql的扩展版本或者改进版本 , 有面向对象接口/prepared语句支持等优势,如果是php4.1.3以后的版本,推荐用mysqli扩展
        PDO提供了一个统一的API接口可以使得你的PHP应用不去关心具体要 连接的数据库服务器系统类型。如果数据库经常变动或不确定数据库(例如开源软件) 用pdo合适

    1、mysql_real_escape_string
        string mysql_real_escape_string ( string $unescaped_string [, resource $link_identifier ] )
        本函数将 unescaped_string 中的特殊字符转义，并计及连接的当前字符集，因此可以安全用于 mysql_query()。
        Note: mysql_real_escape_string() 并不转义 % 和 _。
    2、prepare
        面向对象风格
        mysqli_stmt mysqli::prepare ( string $query )
        过程化风格
        mysqli_stmt mysqli_prepare ( mysqli $link , string $query )

        if ($stmt = $mysqli->prepare("SELECT District FROM City WHERE Name=?")) {
            /* bind parameters for markers */
            $stmt->bind_param("s", $city); //由mysql的API接口处理参数
            /* execute query */
            $stmt->execute();
            /* bind result variables */
            $stmt->bind_result($district);
            /* fetch value */
            $stmt->fetch();
            printf("%s is in district %s\n", $city, $district);
            /* close statement */
            $stmt->close();
        }
    3、autocommit
        用于事务的开始

        面向对象风格
        bool mysqli::autocommit ( bool $mode )
        过程化风格
        bool mysqli_autocommit ( mysqli $link , bool $mode )

        rollback/commit 分别用于事务的回滚和提交
五、MySQL索引和全文检索技术
    1、索引的分类
        (1).普通索引
        (2).唯一性索引(unique / primary)  unique可以插入 ' ' 和 NULL 值。但是是唯一的。
        (3).全文索引(fulltext)
        (4).组合索引

        sql = 'where a=1 and b=1 and c=1'
        (设置索引：a b c，会设置三个索引 a, ab, abc)
        如果有 where a>20 and b>12 and c=0
        在where语句中有 a 值，优化器会根据情况选择其中一个索引。可能 ab 可能abc。如果c的数都大于0，优化器可能直接选ab

六、MySQL索引和全文检索技术

七、SQL语句优化和性能调优
    php sql -> php Api （账号，端口，语句等信息）-> mysql (通过socket链接)  //连接（网络层）
    ->  mysql -> parser（解析）->opt（优化器）->索引/遍历 查询
    ->返回 信息

    2、一条语句执行步骤
        第一步: 将user表和 userinfo表 做笛卡尔积
        1.FROM  子句对其后面的左表user和右表执userinfo行笛卡尔积, 产生虚拟表VT1
        2.ON 子句对VT1中的数据根据ON的条件进行过滤,产生虚拟表VT2
        3.JOIN子句 将未符合条件的保留表中的数据添加都VT2中,形成VT3
        4.WHERE子句 对VT3中的数据进行WHERE条件过滤,形成VT4
        5.GROUP BY 子句对VT4中的数据进行分组操作,然后形成VT5
        6.CUBE | ROLLUP 子句进行操作形成VT6
        7.HAVING 对VT6中的数据进行HAVING 条件过滤,然后形成VT7
        8.SELECT 从VT7中选择要获取的字段,然后形成VT8
        9.DISTINCT 去重数据,形成VT9
        10.ORDER BY 对VT9的结果排序后,形成VT10
        11.LIMIT 从VT10中取出指定的数据,形成VT11,返回给用户

    3、优化数据访问

        1.是不是请求了不需要的数据
        例如 select * from table 然后程序while循环取数据的时候取到第10条跳出
        或者我只想要一个字段的内容,为了图省事用了通配符
            答：看需求
        2.mysql是否在扫描额外的记录
        通过explain 可以了解到mysql扫描到的行数,如果行数越小,则效果越好,当发现这个值很大时而我们需要的结果集又很小时,这个时候我们可以做
        a . 在合适的列增加索引
        b . 改变库表结构.例如使用单独的汇总表或者其他方式记录
        c . 重写sql (后续)
    4、优化原则：
        原则是让查询的数据集更少!!
        （1.优化数据访问
        （2.重构查询方式
        （3.优化特定查询

        重构查询方式
        （1.是一个复杂查询还是多个简单查询
        （2.切分查询
        （3.分解关联查询
八、MySQL数据表水平和垂直拆分
    为什么要分表?

    拆表的目的有几个
        1.单机资源不够
        2.保证重点业务的良好的运行
        3.保证重点用户得到更好的体验

    拆分的方式分两种
        垂直拆分:按功能或业务将原来一个表中的内容拆分成多个表
        水平拆分:将同类型的数据分别存放与相同结构的多个表中

九、MySQL数据库读写分离技术

    php/apache + mysql [冷备/热备]
    php/apache + mysql [热备 主/从]
    php/apache + mysql [热备 主/从 读写分离]
    php/apache + mysql [热备 一主/多从 读写分离]

    DRBD保证磁盘同步