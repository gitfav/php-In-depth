一、NoSQL概述
2、web2.0的NoSQL
	K-V数据库：Memcache
	K-V数据库：redis
	文档数据库：MongoDB（Value值松散）
	列数据库：Hbase（大数据查询）
	图数据库：Neo4J(构建关系图谱)
3、NoSQL适用场景
	数据模型相对简单
	需要灵活性更强的架构
	对数据库性能要求较高
	不需要严格的数据一致性
	对于给定key，比较容易映射复杂值
4、NoSQL安装
    apt-get install memcached/redis-server/mongodb
    yum install memcached/redis/mongodb
    源码安装
二、Memcached的特点

2、Memcached和Session

3、一致性哈希算法
    https://blog.csdn.net/cywosp/article/details/23397179
    设置 虚拟节点 来使数据平均分布在不同服务器上

    http://www.cnblogs.com/spritphp/p/7490605.html  //设置虚拟节点算法的例子

4、memcache的缓存命中率：
    命中率=请求成功数/请求总数

5、memcache lru
    在内存满了的情况下，把最近最少使用的Key替换掉，然后插入新的Key-Value键值

三、Redis
1、Redis特点
    单线程
    数据结构服务器 （易于处理集合运算）
    快 （每秒可处理高达10万次SET操作）
    拥有很多原子操作方法，容易保证数据的一致性
    兼具临时性和永久性
    无中心的分布式集群
2、字符串
    redis字符串是二进制安全的，这意味着redis可以存储包含任意类型的数据
3、哈希
4、列表
    list类型其实就是一个每个子元素都是string类型的双向链表
5、集合

6、redis集群 和 memcache分布式
    （1）用户可以请求任意一个服务器节点，服务器节点检查数据是否在此节点上，如果不在，返回此数据改访问另一个服务器节点的信息。但memcache不会，它会直接找到相应的服务器节点（也算memcache的一个优势）。
    （2）redis如果处理需求多，数据需要有安全性，必须为每个节点设置主从，这样服务器成本提升。对处理简单数据，数据安全性不高的，可以使用memcache，增加和删除节点，因为使用环形哈希算法，失去的数据可以降低。当然可以自己在客户端写环形哈希算法用于redis中

    SLB
    静态文件 cdn部署  swoole长链接技术