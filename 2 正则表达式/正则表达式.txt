一、正则表达式语法基础
1、正则表达式基础
    · 完整的正则表达式由两种字符组成。特殊字符（元字符）和普通字符（文本）

    · 示例：/^\d+hello.*/
        · ^\d + . *都是元字符
        · Hello是文本字符

二、元字符
1、元字符
    . ：匹配出 \n以外的任何字符（注意元字符是小数点）
    [abcd] ：匹配abcd之中的任意一个字符
    [a-h] ：匹配 a 到 h之间的任意一个字符
    [^fgh] ：不与fgh之中人一个字符匹配
    \w ：匹配大小写英文字符及数字 0 到 9 直接任意一个及下划线，相当于[a-zA-Z0-9_]
    \W ：不匹配大小写英文字符及数字 0 到 9 直接任意一个及下划线，相当于[^a-zA-Z0-9_]
    \s ：匹配任何空白字符，相当于[\f\n\r\t\v]
    \S ：匹配任何非空白字符，相当于[$\s]
    \d : 匹配单个数字 [0-9]
    \D ：不匹配单个数字[^0-9]
    [\u4e00-\u9fa5] 匹配任意单个汉字，这里是用 Unicode 编码表示汉字
2、元字符-限定字符
    * ：匹配 0 到多个元字符，相当于{0,}
    + ：匹配至少1个元字符，相当于{1,}
    ? ：匹配 0 到 1 个元字符，相当于{0,1}
    {n} ：匹配n个字符
    {n,} ：匹配至少n个字符
    {n,m} ：匹配n到m个字符
    \b ：匹配单词边界

    ^ ：字符串必须以指定的字符开始
    $ ：字符串必须以指定的字符结束
3、说明
    · 可以将多个字元符或者原义文本字符用括号起来形成一个分组，比如^(13)[4-9]\d{8} 表示任意以13开头的移动手机号码
    · \b的用法。它代表单词的开始或者结尾，以字符串 "123a 345b 456 789d"作为字符串。如果正则表达式是 "\b\d{3}\b"，则仅能匹配 456
    · 可以使用 "|" 来表示或的关系。例如 z|j|q 。和[zjq]是一样的。 或（|）的范围的边界是 开始 到 结束 和 左小括号 到 右小括号 的限定

4、正则表达式的测试
    · 网站：http://www.rexv.org
    · [-0-9A-Z.?]中元字符是哪些？ 答：[]。.?不是，在中括号中表示了普通字符了。
5、元字符的转义
    test\.php匹配test.php

    代码如下：
        echo '\\\\\\$'; //值为\\\s
        echo "\\\\\\\$"; //值为\\\s
        //所以匹配字符串 123123/$sf12 中的 /$ 。正则是 ///$ ，php中更加 '' 和 ""不同来写。

三、进阶
1、多选结构的使用
    · Windows98|Windows2000|WindosXP  表示 Windows98 或 Windows2000 或 WindosXP
    · ^Windows98|Windows2000|WindosXP$  表示 开头是Windows98 或 Windows2000 或 结尾是WindosXP
    · Windows(98|2000|XP)  表示 Windows98 或 Windows2000 或 WindosXP
    (或（|）的限定范围的边界是 开始 到 结束 和 左小括号 到 右小括号)
2、分组
    · 想要重复一个字符串，可以用小括号来指定子表达式（也叫分组）
3、后向引用
    可以匹配括号前后完全一样的单词
4、环视
    · 环视不匹配任何字符，只匹配文本中的特定位置。类似于 \b,^,$那样。环视不会占用字符。
    · 环视分为顺序和逆序两种。
        顺序
        (?=exp) 位置的后面能匹配exp。例：(?=\d)当前位置右边是数字
        (?!exp) 位置的后面不能匹配exp。例：(?=\d)当前位置右边不是数字
        逆序
        (?<=exp) 位置的前面能匹配exp。例：(?=\d)当前位置左边是数字
        (?<!exp) 位置的前面不能匹配exp。例：(?=\d)当前位置左边不是数字
5、贪婪与非贪婪
